1. How to Create an Object in Java?
   Ans: To create a new object in Java, you need to follow the following steps:
   Step 1: Declare a class - In order to create an instance of any class in Java, you must first declare it using the "class" keyword followed by the name of the class
   In Java, you can create an object of a class using the new keyword. Here's a basic example:
    public class Main {
    public static void main(String[] args) {
        // Create an object of the MyClass class
        MyClass myObject = new MyClass();

        // Now you can use the object to call methods
        myObject.myMethod();
    }
}

class MyClass {
    void myMethod() {
        System.out.println("Hello, world!");
    }
}

2. What is the use of a new keyword in Java?
   Ans: The "new" keyword in Java is used to instantiate or create objects from classes. It allocates

3. What are the different types of variables in Java?
   Ans: In Java, there are three types of variables:

1.Local Variables: These variables are declared inside methods, constructors, or blocks. They are created when the method, constructor, or block is entered and destroyed once it is exited.

2.Instance Variables (Non-static Fields): These variables are declared in a class, but outside a method or any block. They are initialized when an instance of the class is created. Instance variables can be accessed from inside any method, constructor, or block of that particular class.

3. Class Variables (Static Fields): These are declared within a class, outside any method, with the static keyword. A class variable is shared by all instances of the class. It can be accessed directly with the class name, without needing to create an instance of the class.
Ex :public class Main {
    static int classVariable = 10; // This is a class variable

    int instanceVariable = 20; // This is an instance variable

    void myMethod() {
        int localVariable = 30; // This is a local variable
        System.out.println("Class Variable: " + classVariable);
        System.out.println("Instance Variable: " + instanceVariable);
        System.out.println("Local Variable: " + localVariable);
    }

    public static void main(String[] args) {
        Main obj = new Main();
        obj.myMethod();
    }
}


4. What is the difference between Instance variable and Local variables?
   Ans:
   Instance variables and local variables in Java have several key differences:

Scope: Instance variables have a larger scope. They are accessible throughout the class, whereas local variables can only be used within the method or block in which they are defined.

Lifetime: The lifetime of an instance variable is the same as the lifetime of the object of the class. As long as the object exists, the instance variable will exist. On the other hand, a local variable only exists during the execution of the method where it is defined.

Default Values: Instance variables have default values. For example, if you don't initialize an instance variable of type int, it will have a default value of 0. Local variables do not have a default value. You must initialize a local variable before you can use it.

Storage: Instance variables are stored in heap memory, whereas local variables are stored in stack memory.

Access Modifiers: Instance variables can be modified by public, private, protected, and default access modifiers. Local variables cannot be declared with access modifiers.


5. In which area memory is allocated for instance variable and local variable?
   Ans: Stack Memory - For local variable, Heap Memory - For instance variable.

6. What is method overloading?
Ans: Method Overloading is a feature of Java that allows two or more methods to exist with the same name but with different parameters. It helps in providing specific functionality based on the number and type of arguments passed Can you provide an example to demonstrate it? Give an example.

public class Main {
    // Method with 2 parameters
    static int add(int a, int b) {
        return a + b;
    }

    // Overloaded method with 3 parameters
    static int add(int a, int b, int c) {
        return a + b + c;
    }

    public static void main(String[] args) {
        System.out.println(add(1, 2)); // Outputs 3
        System.out.println(add(1, 2, 3)); // Outputs 6
    }
}
