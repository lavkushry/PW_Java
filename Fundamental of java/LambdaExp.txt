1. What is the lambda expression of Java 8?
Ans:
Lambda expressions in Java 8 are a new and important feature of Java which was included in Java SE 8. They provide a clear and concise way to represent one method interface using an expression. It is a new and powerful feature of Java which was included in Java SE 8.

2. Can you pass lambda expressions to a method? When?
Ans:
Yes, you can pass lambda expressions to a method, especially when the method expects a functional interface as a parameter. This is often used in methods that take predicates, functions, or consumers.


3. What is the functional interface in Java 8?
Ans: A functional interface in Java 8 is an interface that contains only one abstract method. They can have any number of default or static methods. Functional interfaces are also known as Single Abstract Method interfaces (SAM Interfaces).

4. Why do we use lambda expressions in Java?
Ans: We use lambda expressions in Java to create instances of functional interfaces and to pass behavior in methods. They provide a clear and concise way to implement functional programming concepts in Java.

5. Is it mandatory for a lambda expression to have parameters?
Ans: No, it is not mandatory for a lambda expression to have parameters. A lambda expression can be without parameters. For example, () -> System.out.println("Hello World"); is a valid lambda expression without parameters.